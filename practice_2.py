# -*- coding: utf-8 -*-
"""Practice_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yNsvb5_zZmou0IEV4k9XrBIyN43jgSC0
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv("/content/netflix_titles.csv")
print(df.head())
print(df.describe())
print(df.info())
# print(df)

df['director']=df['director'].fillna('')
#jahan par NAN h,we have filled the values with unknown
df['cast']=df['cast'].fillna('')
df['country']=df['country'].fillna('')
df['description']=df['description'].fillna('')
df['title']=df['title'].fillna('')
df['listed_in']=df['listed_in'].fillna('')

df=df.drop(columns=['show_id'])
df['combined']=df['title']+' '+df['director']+' '+df['cast']+' '+df['country']+' '+df['listed_in']+' '+df['description']
print(df.info())
print(df.head())

#use of tf-idf vectorization to convert textual data to a numeric one
from sklearn.feature_extraction.text import TfidfVectorizer

tfidf=TfidfVectorizer(stop_words='english')
tfidf_matrix=tfidf.fit_transform(df['combined'])

print(tfidf_matrix.shape)
print(tfidf_matrix)

from sklearn.metrics.pairwise import cosine_similarity

cosine_sim=cosine_similarity(tfidf_matrix,tfidf_matrix)
if 'level_0' in df.columns:
  df = df.drop(columns=['level_0'])

df=df.reset_index()

indices=pd.Series(df.index,index=df['title']).drop_duplicates()
def get_recommendations(title, cosine_sim=cosine_sim):
    if title not in indices:
        return "Title not found in dataset."

    idx = indices[title]
    sim_scores = list(enumerate(cosine_sim[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    sim_scores = sim_scores[1:6]  # Exclude the title itself
    movie_indices = [i[0] for i in sim_scores]
    return df['title'].iloc[movie_indices]

# Outside the function â€“ this line executes your recommendation
print(get_recommendations("Kyaa Kool Hai Hum"))  # Title must match exactly

# Helpful for debugging: list close title matches
print("Breaking Bad" in df['title'].values)
print(df[df['title'].str.lower().str.contains("adam")])